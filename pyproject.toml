[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fueltune-streamlit"
version = "1.0.0"
description = "Professional FuelTech Data Analysis Platform built with Streamlit"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FuelTune Development Team", email = "dev@fueltune.com"},
]
maintainers = [
    {name = "FuelTune Development Team", email = "dev@fueltune.com"},
]
keywords = [
    "streamlit",
    "data-analysis", 
    "automotive",
    "fueltech",
    "telemetry",
    "engine-data",
    "fuel-efficiency",
    "performance-analysis"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Streamlit",
    "Environment :: Web Environment",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    # Core Streamlit and Data Processing
    "streamlit>=1.29.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # Visualization
    "plotly>=5.18.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    
    # Data Validation and Processing  
    "pandera>=0.17.0",
    "sqlalchemy>=2.0.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    
    # Configuration and Environment
    "python-dotenv>=1.0.0",
    
    # Additional dependencies
    "openpyxl>=3.1.0",  # Excel support
    "xlrd>=2.0.0",      # Excel reading
    "requests>=2.31.0", # HTTP requests
    "Pillow>=10.0.0",   # Image processing
    "pytz>=2023.3",     # Timezone support
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",   # Parallel testing
    "pytest-html>=4.1.0",    # HTML reports
    
    # Code Quality and Formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "pylint>=3.0.0",
    "mypy>=1.7.0",
    "flake8>=6.0.0",
    "bandit>=1.7.5",         # Security
    
    # Pre-commit Hooks
    "pre-commit>=3.5.0",
    
    # Development and Utilities
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "notebook>=7.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-html>=4.1.0",
    "coverage>=7.3.0",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinxcontrib-mermaid>=0.9.2",
]

prod = [
    # Production optimized dependencies
    "gunicorn>=21.2.0",      # WSGI server
    "uvicorn[standard]>=0.23.0",  # ASGI server
    "redis>=5.0.0",          # Caching
    "psycopg2-binary>=2.9.7", # PostgreSQL
]

all = [
    "fueltune-streamlit[dev,test,docs,prod]"
]

[project.urls]
Homepage = "https://github.com/fueltune/fueltune-streamlit"
Documentation = "https://fueltune-streamlit.readthedocs.io/"
Repository = "https://github.com/fueltune/fueltune-streamlit.git"
Issues = "https://github.com/fueltune/fueltune-streamlit/issues"
Changelog = "https://github.com/fueltune/fueltune-streamlit/blob/main/CHANGELOG.md"

[project.scripts]
fueltune = "main:main"
fueltune-streamlit = "main:main"

[project.gui-scripts]
fueltune-gui = "main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
namespaces = false

[tool.setuptools.package-data]
"*" = [
    "*.txt",
    "*.md", 
    "*.yml",
    "*.yaml",
    "*.json",
    "*.csv",
    "*.sql",
    "*.html",
    "*.css",
    "*.js",
    "templates/*",
    "static/*"
]

# Black formatting configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "config"]
known_third_party = [
    "streamlit", "pandas", "numpy", "plotly", "matplotlib", 
    "seaborn", "sqlalchemy", "pandera", "scipy", "sklearn"
]
sections = [
    "FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
skip_glob = ["venv/*", "build/*", "dist/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

# Ignore certain modules
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "pandas.*",
    "numpy.*", 
    "plotly.*",
    "matplotlib.*",
    "seaborn.*",
    "streamlit.*",
    "sqlalchemy.*",
    "pandera.*",
    "scipy.*",
    "sklearn.*"
]
ignore_missing_imports = true

# Pytest configuration  
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "ui: UI tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "network: Tests that require network",
    "database: Tests that require database",
    "docker: Tests that require Docker"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "setup.py"
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Pylint configuration
[tool.pylint]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle"
]

[tool.pylint.master]
fail-under = 8.0
jobs = 0  # Use all available CPUs
persistent = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint.messages_control] 
confidence = ""
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals"
]

[tool.pylint.reports]
output-format = "json"
reports = false
score = true

[tool.pylint.refactoring]
max-nested-blocks = 5

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "df", "ax", "fig"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
include-naming-hint = true

[tool.pylint.format]
expected-line-ending-format = "LF"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 2000
single-line-class-stmt = false
single-line-if-stmt = false

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = false
min-similarity-lines = 4

[tool.pylint.spelling]
spelling-dict = "en_US"
spelling-ignore-words = [
    "fueltech", "streamlit", "fueltune", "csv", "sql", 
    "api", "ui", "cli", "json", "yaml", "html", "css"
]

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
generated-members = []
ignore-mixin-members = true
ignore-none = true
ignore-on-opaque-inference = true
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
ignored-modules = []
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.variables]
additional-builtins = []
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = false
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
max-args = 8
max-attributes = 12
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 8
max-statements = 60
min-public-methods = 1

[tool.pylint.imports]
allow-wildcard-with-all = false
analyse-fallback-blocks = false
deprecated-modules = ["optparse", "tkinter.tix"]

[tool.pylint.exceptions]
overgeneral-exceptions = ["Exception"]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

# Ruff configuration (alternative to flake8)
[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py
"tests/*.py" = ["B011"]   # Ignore assert False in tests

[tool.ruff.isort]
known-first-party = ["src", "config"]