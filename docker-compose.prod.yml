# =============================================
# FuelTune Streamlit - Production Environment
# =============================================
# Production-ready setup with security and monitoring
version: '3.8'

services:
  # =============================================
  # Load Balancer (NGINX)
  # =============================================
  nginx:
    image: nginx:alpine
    container_name: fueltune-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - fueltune-network
    restart: unless-stopped
    depends_on:
      - fueltune-app-1
      - fueltune-app-2
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================
  # FuelTune Application (Multi-instance)
  # =============================================
  fueltune-app-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fueltune-app-1
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://fueltune:${POSTGRES_PASSWORD}@postgres:5432/fueltune_prod
      - REDIS_URL=redis://redis:6379/0
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - CACHE_EXPIRY_HOURS=24
      - APP_ENV=production
      - INSTANCE_ID=app-1
    volumes:
      - ./data:/app/data:ro
      - app_logs_1:/app/logs
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  fueltune-app-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fueltune-app-2
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://fueltune:${POSTGRES_PASSWORD}@postgres:5432/fueltune_prod
      - REDIS_URL=redis://redis:6379/0
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - CACHE_EXPIRY_HOURS=24
      - APP_ENV=production
      - INSTANCE_ID=app-2
    volumes:
      - ./data:/app/data:ro
      - app_logs_2:/app/logs
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # =============================================
  # PostgreSQL Database (Production)
  # =============================================
  postgres:
    image: postgres:15-alpine
    container_name: fueltune-postgres
    environment:
      - POSTGRES_DB=fueltune_prod
      - POSTGRES_USER=fueltune
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fueltune -d fueltune_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # =============================================
  # Redis Cache (Production)
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: fueltune-redis
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================
  # Monitoring & Observability
  # =============================================
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: fueltune-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: fueltune-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fueltune-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fueltune-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - fueltune-network
    restart: unless-stopped

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: fueltune-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - fueltune-network
    restart: unless-stopped
    pid: host

  # =============================================
  # Log Management
  # =============================================
  
  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: fueltune-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - fueltune-network
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: fueltune-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - app_logs_1:/var/log/app1:ro
      - app_logs_2:/var/log/app2:ro
      - /var/log:/var/log:ro
    networks:
      - fueltune-network
    restart: unless-stopped

# =============================================
# Networks
# =============================================
networks:
  fueltune-network:
    driver: bridge
    name: fueltune-prod-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================
# Volumes
# =============================================
volumes:
  postgres_prod_data:
    name: fueltune_postgres_prod_data
  redis_prod_data:
    name: fueltune_redis_prod_data
  nginx_cache:
    name: fueltune_nginx_cache
  app_logs_1:
    name: fueltune_app_logs_1
  app_logs_2:
    name: fueltune_app_logs_2
  prometheus_prod_data:
    name: fueltune_prometheus_prod_data
  grafana_prod_data:
    name: fueltune_grafana_prod_data
  alertmanager_data:
    name: fueltune_alertmanager_data
  loki_data:
    name: fueltune_loki_data