=====================================
Tutorial: Importa√ß√£o de Dados FuelTech
=====================================

Este tutorial ensina como importar, validar e preparar dados FuelTech para an√°lise. 
Voc√™ aprender√° desde o b√°sico at√© t√©cnicas avan√ßadas para diferentes cen√°rios.

.. note::
   **Dura√ß√£o estimada**: 15-20 minutos
   
   **Pr√©-requisitos**: 
   - FuelTune Analyzer instalado
   - Arquivo CSV FuelTech (ou arquivo de exemplo)

üéØ Objetivos do Tutorial
========================

Ao final deste tutorial, voc√™ saber√°:

- ‚úÖ Como preparar arquivos FuelTech para importa√ß√£o
- ‚úÖ Diferentes m√©todos de importa√ß√£o (UI, API, program√°tico)
- ‚úÖ Como validar e corrigir problemas nos dados
- ‚úÖ Otimizar importa√ß√£o de arquivos grandes
- ‚úÖ Trabalhar com m√∫ltiplos arquivos e sess√µes

üìÅ Prepara√ß√£o dos Arquivos
==========================

Tipos de Arquivo Suportados
----------------------------

.. list-table::
   :widths: 20 30 50
   :header-rows: 1

   * - Formato
     - Extens√£o
     - Observa√ß√µes
   * - **CSV FuelTech**
     - `.csv`
     - Formato padr√£o (recomendado)
   * - **Excel FuelTech**
     - `.xlsx`, `.xls`
     - Deve ter dados na primeira aba
   * - **CSV Gen√©rico**
     - `.csv`
     - Headers mapeados manualmente
   * - **ZIP/RAR**
     - `.zip`, `.rar`
     - M√∫ltiplos arquivos compactados

Estrutura Esperada do CSV
--------------------------

**Headers Obrigat√≥rios (portugu√™s):**

.. code-block:: text

   TIME,RPM,MAP,LAMBDA,ENGINE_TEMP,THROTTLE_POS
   0.000,1000,50.2,0.85,85.5,15.2
   0.100,1050,51.8,0.87,85.6,16.8
   ...

**Headers Alternativos (ingl√™s):**

.. code-block:: text

   Time,Engine_Speed,Manifold_Pressure,Lambda,Engine_Temperature,Throttle_Position
   0.000,1000,50.2,0.85,85.5,15.2
   ...

.. tip::
   **Verifica√ß√£o r√°pida**: Abra seu CSV em um editor de texto. 
   A primeira linha deve conter os nomes dos par√¢metros separados por v√≠rgula.

Verifica√ß√£o de Integridade
---------------------------

Antes de importar, verifique:

.. code-block:: bash

   # Contar linhas (Linux/macOS)
   wc -l arquivo.csv
   
   # Verificar encoding
   file -i arquivo.csv
   
   # Ver primeiras linhas
   head -5 arquivo.csv

**Problemas Comuns:**

- ‚ùå Arquivo vazio ou s√≥ com headers
- ‚ùå Encoding incorreto (deve ser UTF-8 ou Latin-1)
- ‚ùå Separador diferente de v√≠rgula
- ‚ùå Valores com v√≠rgula decimal (deve ser ponto)

üîß M√©todo 1: Importa√ß√£o via Interface
=====================================

Importa√ß√£o B√°sica
------------------

1. **Abra o FuelTune Analyzer**:

   .. code-block:: bash
   
      streamlit run app.py

2. **Acesse a p√°gina de Upload**:
   - Na sidebar esquerda ‚Üí **üìÅ Upload de Dados**

3. **Selecione o arquivo**:
   - Arraste o arquivo CSV para a √°rea de upload
   - Ou clique em "Browse files" e selecione

4. **Configure as op√ß√µes**:
   
   .. list-table::
      :widths: 30 70
      :header-rows: 1

      * - Op√ß√£o
        - Recomenda√ß√£o
      * - **Encoding**
        - Auto-detect (padr√£o) ou Latin-1 para FuelTech BR
      * - **Decimal Separator**
        - Ponto (.) - padr√£o internacional
      * - **Skip Rows**
        - 0 (padr√£o) ou 1 se houver linha extra
      * - **Validar Dados**
        - ‚úÖ Sempre habilitado (recomendado)

5. **Clique em "Processar Arquivo"**

.. mermaid::

   flowchart TD
       START[Selecionar Arquivo] --> UPLOAD[Upload]
       UPLOAD --> DETECT[Auto-detec√ß√£o de Formato]
       DETECT --> VALIDATE[Valida√ß√£o]
       VALIDATE --> SUCCESS[‚úÖ Sucesso]
       VALIDATE --> ERROR[‚ùå Erro]
       ERROR --> FIX[Corrigir Problemas]
       FIX --> UPLOAD

Tratamento de Erros
-------------------

**Erro: "Formato n√£o reconhecido"**

.. code-block:: text

   ‚ùå PROBLEMA: Headers n√£o foram reconhecidos
   
   ‚úÖ SOLU√á√ÉO:
   1. Verificar se primeira linha tem nomes das colunas
   2. Tentar encoding "Latin-1"
   3. Verificar separador (v√≠rgula vs ponto-e-v√≠rgula)

**Erro: "Dados insuficientes"**

.. code-block:: text

   ‚ùå PROBLEMA: Arquivo muito pequeno ou sem dados v√°lidos
   
   ‚úÖ SOLU√á√ÉO:
   1. M√≠nimo 50 linhas de dados necess√°rias
   2. Verificar se colunas TIME, RPM, MAP existem
   3. Conferir se dados n√£o est√£o todos zerados

**Erro: "Valida√ß√£o falhou"**

.. code-block:: text

   ‚ùå PROBLEMA: Valores fora dos limites esperados
   
   ‚úÖ SOLU√á√ÉO:
   1. Revisar relat√≥rio de valida√ß√£o
   2. Decidir se aceitar com avisos
   3. Limpar dados manualmente se necess√°rio

Importa√ß√£o com Configura√ß√µes Avan√ßadas
---------------------------------------

.. code-block:: python

   # Configura√ß√£o para importa√ß√£o avan√ßada
   import_settings = {
       'encoding': 'latin-1',
       'decimal_separator': '.',
       'thousands_separator': '',
       'skip_rows': 0,
       'max_rows': None,  # Importar tudo
       'columns': None,   # Todas as colunas
       'validate': True,
       'clean_data': True,
       'interpolate_missing': True,
       'remove_outliers': False,
       'chunk_size': 10000
   }

üìä M√©todo 2: Importa√ß√£o Program√°tica
====================================

Importa√ß√£o B√°sica via Python
-----------------------------

.. code-block:: python

   from src.data.csv_parser import parse_fueltech_csv
   from src.data.validators import validate_telemetry_data
   
   # Importa√ß√£o simples
   data = parse_fueltech_csv("caminho/para/arquivo.csv")
   
   # Verificar resultado
   print(f"Dados carregados: {len(data)} linhas")
   print(f"Colunas: {list(data.columns)}")
   print(f"Per√≠odo: {data['TIME'].min():.1f}s - {data['TIME'].max():.1f}s")

Importa√ß√£o com Valida√ß√£o
------------------------

.. code-block:: python

   from src.data.csv_parser import CSVParser
   from src.data.validators import FuelTechValidator
   
   # Parser personalizado
   parser = CSVParser(
       encoding='latin-1',
       validate_on_load=True,
       skip_malformed_lines=True,
       interpolate_missing=True
   )
   
   try:
       # Carregar e validar
       data = parser.parse("arquivo.csv")
       
       # Valida√ß√£o adicional
       validator = FuelTechValidator()
       is_valid, errors = validator.validate(data)
       
       if is_valid:
           print("‚úÖ Dados v√°lidos!")
       else:
           print("‚ö†Ô∏è Problemas encontrados:")
           for error in errors:
               print(f"  - {error}")
               
   except Exception as e:
       print(f"‚ùå Erro na importa√ß√£o: {e}")

Importa√ß√£o de Arquivos Grandes
-------------------------------

.. code-block:: python

   from src.data.csv_parser import parse_chunked
   from src.data.cache import DataCache
   
   # Processamento chunked para arquivos >100MB
   cache = DataCache()
   processed_chunks = []
   
   for chunk_num, chunk in enumerate(parse_chunked("arquivo_grande.csv", chunk_size=5000)):
       print(f"Processando chunk {chunk_num + 1}...")
       
       # Processar chunk
       processed_chunk = process_data_chunk(chunk)
       processed_chunks.append(processed_chunk)
       
       # Cache intermedi√°rio
       cache.set(f"chunk_{chunk_num}", chunk.to_dict())
   
   # Concatenar todos os chunks
   complete_data = pd.concat(processed_chunks, ignore_index=True)
   print(f"‚úÖ Arquivo completo: {len(complete_data)} linhas")

üóÇÔ∏è M√©todo 3: Importa√ß√£o de M√∫ltiplos Arquivos
==============================================

Importa√ß√£o em Lote
-------------------

.. code-block:: python

   from pathlib import Path
   from src.data.batch_importer import BatchImporter
   
   # Configurar importador em lote
   batch_importer = BatchImporter(
       source_directory="data/raw_files/",
       output_directory="data/processed/",
       file_pattern="*.csv",
       parallel_processing=True,
       max_workers=4
   )
   
   # Executar importa√ß√£o
   results = batch_importer.process_all()
   
   # Relat√≥rio de resultados
   print(f"Arquivos processados: {results.success_count}")
   print(f"Arquivos com erro: {results.error_count}")
   
   for error in results.errors:
       print(f"‚ùå {error.filename}: {error.message}")

Compara√ß√£o de Sess√µes
---------------------

.. code-block:: python

   from src.data.session_manager import SessionManager
   
   # Gerenciador de sess√µes
   session_mgr = SessionManager()
   
   # Importar m√∫ltiplas sess√µes
   sessions = {}
   files = ["sessao1.csv", "sessao2.csv", "sessao3.csv"]
   
   for file in files:
       session_name = Path(file).stem
       data = parse_fueltech_csv(file)
       
       # Adicionar metadados
       metadata = {
           'vehicle': 'Civic Si',
           'date': '2024-09-03',
           'track': 'Interlagos',
           'driver': 'Piloto A'
       }
       
       session_id = session_mgr.create_session(
           name=session_name,
           data=data,
           metadata=metadata
       )
       
       sessions[session_name] = session_id
   
   # Listar sess√µes criadas
   for name, session_id in sessions.items():
       session = session_mgr.get_session(session_id)
       print(f"üìä {name}: {len(session.data)} pontos")

üîç Valida√ß√£o e Limpeza de Dados
===============================

Valida√ß√£o Autom√°tica
---------------------

.. code-block:: python

   from src.data.validators import comprehensive_validation
   from src.data.quality import DataQualityAnalyzer
   
   # Valida√ß√£o completa
   validation_report = comprehensive_validation(data)
   
   print("üìã RELAT√ìRIO DE VALIDA√á√ÉO")
   print(f"Status geral: {'‚úÖ PASS' if validation_report.passed else '‚ùå FAIL'}")
   print(f"Completude: {validation_report.completeness:.1%}")
   print(f"Consist√™ncia: {validation_report.consistency:.1%}")
   
   # Detalhes por coluna
   for column, status in validation_report.column_status.items():
       icon = "‚úÖ" if status.valid else "‚ö†Ô∏è"
       print(f"{icon} {column}: {status.message}")
   
   # Qualidade dos dados
   quality_analyzer = DataQualityAnalyzer()
   quality_report = quality_analyzer.analyze(data)
   
   if quality_report.outliers_count > 0:
       print(f"‚ö†Ô∏è {quality_report.outliers_count} outliers detectados")
       print("Colunas afetadas:", quality_report.outlier_columns)

Limpeza Autom√°tica
-------------------

.. code-block:: python

   from src.data.cleaning import DataCleaner
   
   # Limpador autom√°tico
   cleaner = DataCleaner(
       remove_duplicates=True,
       interpolate_missing=True,
       remove_outliers=True,
       smooth_noise=False,
       outlier_method='z_score',
       outlier_threshold=3.0
   )
   
   # Dados originais
   print(f"Dados originais: {len(data)} linhas")
   
   # Aplicar limpeza
   cleaned_data = cleaner.clean(data)
   
   # Relat√≥rio de limpeza
   cleaning_report = cleaner.get_cleaning_report()
   print(f"Dados limpos: {len(cleaned_data)} linhas")
   print(f"Duplicatas removidas: {cleaning_report.duplicates_removed}")
   print(f"Valores interpolados: {cleaning_report.values_interpolated}")
   print(f"Outliers removidos: {cleaning_report.outliers_removed}")

Limpeza Manual
--------------

.. code-block:: python

   # Remo√ß√£o manual de outliers
   def remove_manual_outliers(data, column, min_val, max_val):
       """Remove outliers baseado em limites manuais."""
       before_count = len(data)
       data = data[(data[column] >= min_val) & (data[column] <= max_val)]
       after_count = len(data)
       
       print(f"üßπ {column}: removidas {before_count - after_count} linhas")
       return data
   
   # Aplicar filtros manuais
   data = remove_manual_outliers(data, 'RPM', 500, 8500)
   data = remove_manual_outliers(data, 'MAP', 10, 300)
   data = remove_manual_outliers(data, 'LAMBDA', 0.5, 1.5)

üìä Visualiza√ß√£o P√≥s-Importa√ß√£o
==============================

Verifica√ß√£o Visual R√°pida
--------------------------

.. code-block:: python

   import plotly.express as px
   from src.ui.components import create_quick_overview
   
   # Gr√°ficos de verifica√ß√£o
   fig_rpm = px.line(data, x='TIME', y='RPM', title='RPM vs Tempo')
   fig_map = px.line(data, x='TIME', y='MAP', title='MAP vs Tempo')
   
   # Overview autom√°tico
   overview = create_quick_overview(data)
   print(overview)

Estat√≠sticas B√°sicas
--------------------

.. code-block:: python

   # Estat√≠sticas descritivas
   stats = data.describe()
   print("üìä ESTAT√çSTICAS DOS DADOS IMPORTADOS")
   print(stats.round(2))
   
   # Informa√ß√µes espec√≠ficas
   print(f"\nüéØ INFORMA√á√ïES DA SESS√ÉO:")
   print(f"Dura√ß√£o: {data['TIME'].max():.1f} segundos")
   print(f"RPM m√°ximo: {data['RPM'].max():.0f}")
   print(f"MAP m√°ximo: {data['MAP'].max():.1f} kPa")
   print(f"Temperatura m√°xima: {data['ENGINE_TEMP'].max():.1f}¬∞C")

üîß Resolu√ß√£o de Problemas Comuns
================================

Problemas de Encoding
---------------------

.. code-block:: python

   # Detectar encoding automaticamente
   import chardet
   
   def detect_encoding(filepath):
       with open(filepath, 'rb') as file:
           raw_data = file.read()
           result = chardet.detect(raw_data)
           return result['encoding']
   
   # Uso
   encoding = detect_encoding("arquivo.csv")
   print(f"Encoding detectado: {encoding}")
   
   # For√ßar encoding espec√≠fico
   data = parse_fueltech_csv("arquivo.csv", encoding='latin-1')

Problemas de Separador
----------------------

.. code-block:: python

   # Detectar separador automaticamente
   def detect_separator(filepath):
       with open(filepath, 'r') as file:
           first_line = file.readline()
           if ';' in first_line:
               return ';'
           elif ',' in first_line:
               return ','
           elif '\t' in first_line:
               return '\t'
           return ','
   
   # Parser com separador customizado
   separator = detect_separator("arquivo.csv")
   data = pd.read_csv("arquivo.csv", sep=separator)

Dados Corrompidos
-----------------

.. code-block:: python

   # Carregar com tratamento de erros
   def safe_load_csv(filepath):
       try:
           # Primeira tentativa - configura√ß√£o padr√£o
           return pd.read_csv(filepath)
       except UnicodeDecodeError:
           # Segunda tentativa - encoding latin-1
           return pd.read_csv(filepath, encoding='latin-1')
       except pd.errors.ParserError:
           # Terceira tentativa - ignorar linhas problem√°ticas
           return pd.read_csv(filepath, error_bad_lines=False)
       except Exception as e:
           print(f"‚ùå Falha na importa√ß√£o: {e}")
           return None
   
   data = safe_load_csv("arquivo_problema.csv")

üìà Otimiza√ß√£o de Performance
============================

Importa√ß√£o R√°pida
------------------

.. code-block:: python

   # Configura√ß√µes otimizadas para arquivos grandes
   optimal_config = {
       'engine': 'c',           # Engine C √© mais r√°pido
       'low_memory': False,     # Carrega tudo na mem√≥ria
       'dtype': {               # Especificar tipos de dados
           'TIME': 'float32',
           'RPM': 'uint16',
           'MAP': 'float32',
           'LAMBDA': 'float32'
       },
       'usecols': [             # Carregar apenas colunas necess√°rias
           'TIME', 'RPM', 'MAP', 'LAMBDA', 'ENGINE_TEMP'
       ]
   }
   
   # Aplicar configura√ß√µes
   data = pd.read_csv("arquivo.csv", **optimal_config)

Monitoramento de Performance
----------------------------

.. code-block:: python

   import time
   import psutil
   
   def benchmark_import(filepath):
       """Benchmark de importa√ß√£o com m√©tricas."""
       start_time = time.time()
       start_memory = psutil.Process().memory_info().rss / 1024 / 1024
       
       # Importar dados
       data = parse_fueltech_csv(filepath)
       
       end_time = time.time()
       end_memory = psutil.Process().memory_info().rss / 1024 / 1024
       
       # M√©tricas
       duration = end_time - start_time
       memory_used = end_memory - start_memory
       rows_per_second = len(data) / duration
       
       print(f"üìä BENCHMARK DE IMPORTA√á√ÉO")
       print(f"Tempo: {duration:.2f}s")
       print(f"Mem√≥ria: {memory_used:.1f} MB")
       print(f"Velocidade: {rows_per_second:.0f} linhas/s")
       
       return data

‚úÖ Checklist de Importa√ß√£o
==========================

.. raw:: html

   <div class="feature-grid">
      <div class="feature-card">
         <h3>‚úÖ Pr√©-importa√ß√£o</h3>
         <ul>
            <li>‚òê Arquivo √© CSV v√°lido</li>
            <li>‚òê Headers est√£o corretos</li>
            <li>‚òê Encoding verificado</li>
            <li>‚òê Tamanho do arquivo adequado</li>
         </ul>
      </div>
      <div class="feature-card">
         <h3>‚úÖ Durante Importa√ß√£o</h3>
         <ul>
            <li>‚òê Configura√ß√µes apropriadas</li>
            <li>‚òê Valida√ß√£o habilitada</li>
            <li>‚òê Progresso monitorado</li>
            <li>‚òê Erros tratados</li>
         </ul>
      </div>
      <div class="feature-card">
         <h3>‚úÖ P√≥s-importa√ß√£o</h3>
         <ul>
            <li>‚òê Dados validados</li>
            <li>‚òê Estat√≠sticas verificadas</li>
            <li>‚òê Visualiza√ß√£o b√°sica</li>
            <li>‚òê Backup dos dados</li>
         </ul>
      </div>
   </div>

üìö Pr√≥ximos Passos
==================

Agora que voc√™ domina a importa√ß√£o:

1. **üìä An√°lise**: :doc:`analysis-workflow` - Workflow completo de an√°lise
2. **üé® Visualiza√ß√£o**: :doc:`custom-analysis` - Gr√°ficos e an√°lises customizadas  
3. **üìÑ Relat√≥rios**: :doc:`export-results` - Exporta√ß√£o e relat√≥rios

**Scripts √öteis:**

.. code-block:: bash

   # Download de exemplos
   ./scripts/download_examples.sh
   
   # Valida√ß√£o em lote
   python scripts/batch_validate.py data/raw/
   
   # Convers√£o de formatos
   python scripts/convert_formats.py input.xlsx output.csv

.. note::
   **üí° Dica**: Mantenha sempre uma c√≥pia backup dos dados originais 
   antes de aplicar qualquer limpeza ou transforma√ß√£o!

----

**Parab√©ns!** üéâ Voc√™ agora domina a importa√ß√£o de dados FuelTech. 
Continue com o pr√≥ximo tutorial para aprender workflows de an√°lise completos.