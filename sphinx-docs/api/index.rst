=================
Refer√™ncia da API
=================

Esta se√ß√£o cont√©m a documenta√ß√£o completa da API do FuelTune Analyzer, incluindo todos os m√≥dulos, 
classes, fun√ß√µes e m√©todos dispon√≠veis para desenvolvedores.

.. note::
   A documenta√ß√£o da API √© gerada automaticamente a partir dos docstrings do c√≥digo fonte 
   usando Sphinx AutoAPI. Todas as fun√ß√µes e classes p√∫blicas est√£o documentadas com 
   exemplos de uso, par√¢metros e valores de retorno.

Vis√£o Geral dos M√≥dulos
=======================

O FuelTune Analyzer est√° organizado em quatro m√≥dulos principais:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - M√≥dulo
     - Descri√ß√£o
   * - **data**
     - Processamento, valida√ß√£o e modelagem de dados FuelTech
   * - **analysis**
     - M√≥dulos especializados de an√°lise estat√≠stica e performance
   * - **ui**
     - Componentes de interface Streamlit e p√°ginas
   * - **integration**
     - Sistema de workflow, exporta√ß√£o e plugins
   * - **utils**
     - Utilit√°rios de logging e configura√ß√£o

üóÇÔ∏è Estrutura dos M√≥dulos
========================

.. mermaid::

   graph TD
       API[API FuelTune] --> DATA[data]
       API --> ANALYSIS[analysis]
       API --> UI[ui]
       API --> INTEGRATION[integration]
       API --> UTILS[utils]
       
       DATA --> PARSER[csv_parser]
       DATA --> MODELS[models]
       DATA --> VALIDATORS[validators]
       DATA --> CACHE[cache]
       DATA --> DB[database]
       
       ANALYSIS --> PERF[performance]
       ANALYSIS --> STATS[statistics]
       ANALYSIS --> TIMESERIES[time_series]
       ANALYSIS --> CORR[correlation]
       ANALYSIS --> ANOMALY[anomaly]
       
       UI --> COMPONENTS[components]
       UI --> PAGES[pages]
       
       INTEGRATION --> EXPORT[export_import]
       INTEGRATION --> WORKFLOW[workflow]
       INTEGRATION --> PIPELINE[pipeline]

üìã Refer√™ncia Completa por M√≥dulo
=================================

.. toctree::
   :maxdepth: 3
   :caption: M√≥dulos de Dados
   
   modules/data
   modules/models
   modules/validators

.. toctree::
   :maxdepth: 3
   :caption: M√≥dulos de An√°lise
   
   modules/analysis
   modules/statistics
   modules/performance

.. toctree::
   :maxdepth: 3
   :caption: Interface do Usu√°rio
   
   modules/ui
   modules/components
   modules/pages

.. toctree::
   :maxdepth: 3
   :caption: Integra√ß√£o e Workflow
   
   modules/integration
   modules/workflow
   modules/export

.. toctree::
   :maxdepth: 2
   :caption: Utilit√°rios
   
   modules/utils

üîç Busca R√°pida
===============

**Classes Principais:**

* :py:class:`src.data.models.TelemetryData` - Modelo principal de dados de telemetria
* :py:class:`src.data.csv_parser.CSVParser` - Parser de arquivos CSV FuelTech
* :py:class:`src.analysis.performance.PerformanceAnalyzer` - An√°lise de performance
* :py:class:`src.analysis.statistics.StatisticalAnalyzer` - An√°lises estat√≠sticas
* :py:class:`src.integration.workflow.WorkflowManager` - Gerenciamento de workflow

**Fun√ß√µes Principais:**

* :py:func:`src.data.csv_parser.parse_fueltech_csv` - Fun√ß√£o principal de parsing
* :py:func:`src.analysis.performance.calculate_power` - C√°lculo de pot√™ncia
* :py:func:`src.analysis.statistics.descriptive_stats` - Estat√≠sticas descritivas
* :py:func:`src.integration.export_import.export_to_excel` - Exporta√ß√£o para Excel

üìñ Conven√ß√µes de Documenta√ß√£o
=============================

**Docstring Format**
   Utilizamos o formato Google Docstring para todas as fun√ß√µes e classes:

   .. code-block:: python

      def example_function(param1: str, param2: int = 10) -> bool:
          """Fun√ß√£o de exemplo para demonstrar formato de docstring.
          
          Esta fun√ß√£o demonstra como documentamos todas as fun√ß√µes da API
          seguindo o padr√£o Google Docstring.
          
          Args:
              param1: Descri√ß√£o do primeiro par√¢metro
              param2: Descri√ß√£o do segundo par√¢metro com valor padr√£o
              
          Returns:
              True se a opera√ß√£o foi bem-sucedida, False caso contr√°rio
              
          Raises:
              ValueError: Se param1 for uma string vazia
              TypeError: Se param2 n√£o for um inteiro
              
          Examples:
              >>> example_function("teste", 20)
              True
              
              >>> example_function("", 5)
              ValueError: param1 n√£o pode ser vazio
          """
          if not param1:
              raise ValueError("param1 n√£o pode ser vazio")
          return True

**Type Hints**
   Todas as fun√ß√µes incluem type hints completos para melhor IDE support:

   .. code-block:: python

      from typing import List, Dict, Optional, Union
      import pandas as pd
      
      def process_data(
          data: pd.DataFrame,
          columns: List[str],
          config: Optional[Dict[str, Union[str, int]]] = None
      ) -> pd.DataFrame:
          """Processa dados com type hints completos."""
          pass

**Exemplos de Uso**
   Cada fun√ß√£o inclui exemplos pr√°ticos de uso:

   .. code-block:: python

      # Exemplo b√°sico
      from src.data.csv_parser import parse_fueltech_csv
      
      # Carregar dados FuelTech
      data = parse_fueltech_csv("caminho/para/arquivo.csv")
      
      # Exemplo com configura√ß√µes
      data = parse_fueltech_csv(
          "arquivo.csv",
          encoding="latin-1",
          skip_rows=1,
          validate=True
      )

üéØ Padr√µes de Design
===================

**Factory Pattern**
   Usado para cria√ß√£o de analisadores especializados:

   .. code-block:: python

      from src.analysis import AnalyzerFactory
      
      # Criar analisador de performance
      analyzer = AnalyzerFactory.create_analyzer("performance")
      
      # Executar an√°lise
      results = analyzer.analyze(data)

**Strategy Pattern**
   Implementado para diferentes tipos de exporta√ß√£o:

   .. code-block:: python

      from src.integration.export_import import ExportStrategy
      
      # Estrat√©gia Excel
      excel_exporter = ExportStrategy.create("excel")
      excel_exporter.export(data, "output.xlsx")
      
      # Estrat√©gia CSV
      csv_exporter = ExportStrategy.create("csv")
      csv_exporter.export(data, "output.csv")

**Observer Pattern**
   Usado para notifica√ß√µes de workflow:

   .. code-block:: python

      from src.integration.workflow import WorkflowManager
      
      workflow = WorkflowManager()
      
      # Registrar observador
      workflow.register_observer("data_loaded", callback_function)
      
      # Executar workflow
      workflow.execute_pipeline(data)

‚ö†Ô∏è Notas Importantes
===================

**Compatibilidade de Vers√£o**
   - Python 3.11+ obrigat√≥rio
   - Streamlit 1.29+ recomendado
   - Pandas 2.0+ para melhor performance

**Performance**
   - Processamento otimizado para arquivos grandes (10k+ linhas)
   - Uso de chunked processing para economia de mem√≥ria
   - Cache inteligente para an√°lises repetitivas

**Seguran√ßa**
   - Valida√ß√£o rigorosa de entrada de dados
   - Sanitiza√ß√£o de par√¢metros SQL
   - Verifica√ß√£o de limites de seguran√ßa FuelTech

**Thread Safety**
   - M√≥dulos de an√°lise s√£o thread-safe
   - Cache implementa locks para acesso concorrente
   - UI components s√£o single-threaded (Streamlit)

üìö Recursos Adicionais
=====================

**C√≥digo Fonte**
   - `GitHub Repository <https://github.com/fueltune/analyzer-streamlit>`_
   - `Issue Tracker <https://github.com/fueltune/analyzer-streamlit/issues>`_
   - `Pull Requests <https://github.com/fueltune/analyzer-streamlit/pulls>`_

**Comunidade**
   - `Discord Server <https://discord.gg/fueltune>`_
   - `Stack Overflow Tag <https://stackoverflow.com/questions/tagged/fueltune>`_
   - `Email Support <mailto:support@fueltune.com>`_

.. note::
   Esta documenta√ß√£o da API √© atualizada automaticamente a cada release. 
   Para a vers√£o mais recente, visite sempre a documenta√ß√£o online.

----

**√öltima atualiza√ß√£o:** |today|