"""
Teste b√°sico do tema profissional - FuelTune Analyzer
====================================================

Script de teste para validar a implementa√ß√£o do tema corporativo
sem executar toda a aplica√ß√£o.

Author: A04-STREAMLIT-PROFESSIONAL Agent
Created: 2025-01-03
"""

import sys
from pathlib import Path

# Add src directory to path
PROJECT_ROOT = Path(__file__).parent.absolute()
sys.path.insert(0, str(PROJECT_ROOT / "src"))

def test_theme_import():
    """Testar importa√ß√£o do tema profissional."""
    try:
        from src.ui.theme_config import ProfessionalTheme, ThemeColors, apply_professional_theme
        print("‚úì Importa√ß√£o do tema profissional: OK")
        return True
    except ImportError as e:
        print(f"‚úó Erro na importa√ß√£o do tema: {e}")
        return False

def test_theme_colors():
    """Testar configura√ß√£o de cores."""
    try:
        from src.ui.theme_config import ThemeColors
        
        colors = ThemeColors()
        
        # Testar cores principais
        assert colors.primary == "#1976D2", "Cor prim√°ria incorreta"
        assert colors.success == "#4CAF50", "Cor de sucesso incorreta"
        assert colors.error == "#F44336", "Cor de erro incorreta"
        
        print("‚úì Configura√ß√£o de cores: OK")
        return True
    except Exception as e:
        print(f"‚úó Erro na configura√ß√£o de cores: {e}")
        return False

def test_theme_generation():
    """Testar gera√ß√£o de CSS."""
    try:
        from src.ui.theme_config import ProfessionalTheme
        
        theme = ProfessionalTheme()
        css = theme._generate_professional_css()
        
        # Verificar se cont√©m elementos essenciais
        assert "Material Icons" in css, "Material Icons n√£o encontrado"
        assert "--primary-color" in css, "Vari√°veis CSS n√£o encontradas"
        assert ".material-icons" in css, "Classe de √≠cones n√£o encontrada"
        
        print("‚úì Gera√ß√£o de CSS: OK")
        return True
    except Exception as e:
        print(f"‚úó Erro na gera√ß√£o de CSS: {e}")
        return False

def test_theme_components():
    """Testar componentes do tema."""
    try:
        from src.ui.theme_config import ProfessionalTheme
        
        theme = ProfessionalTheme()
        
        # Testar cria√ß√£o de badge
        badge = theme.create_status_badge("success", "Teste")
        assert "check_circle" in badge, "√çcone de sucesso n√£o encontrado"
        assert "Teste" in badge, "Texto do badge n√£o encontrado"
        
        # Testar cria√ß√£o de bot√£o
        button = theme.create_icon_button("settings", "Configura√ß√µes")
        assert "settings" in button, "√çcone do bot√£o n√£o encontrado"
        assert "Configura√ß√µes" in button, "Texto do bot√£o n√£o encontrado"
        
        # Testar cabe√ßalho
        header = theme.create_section_header("dashboard", "Dashboard", "Teste")
        assert "dashboard" in header, "√çcone do cabe√ßalho n√£o encontrado"
        assert "Dashboard" in header, "T√≠tulo do cabe√ßalho n√£o encontrado"
        
        print("‚úì Componentes do tema: OK")
        return True
    except Exception as e:
        print(f"‚úó Erro nos componentes do tema: {e}")
        return False

def test_material_cards():
    """Testar cria√ß√£o de cards."""
    try:
        from src.ui.theme_config import create_material_card
        
        card = create_material_card("Teste", "Conte√∫do do teste", "info")
        assert "Teste" in card, "T√≠tulo do card n√£o encontrado"
        assert "Conte√∫do do teste" in card, "Conte√∫do do card n√£o encontrado"
        assert "info" in card, "√çcone do card n√£o encontrado"
        
        print("‚úì Material Cards: OK")
        return True
    except Exception as e:
        print(f"‚úó Erro nos Material Cards: {e}")
        return False

def main():
    """Executar todos os testes."""
    print("=" * 60)
    print("TESTE DO TEMA PROFISSIONAL - FUELTUNE ANALYZER")
    print("=" * 60)
    print()
    
    tests = [
        test_theme_import,
        test_theme_colors,
        test_theme_generation,
        test_theme_components,
        test_material_cards,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚úó Erro inesperado no teste {test.__name__}: {e}")
    
    print()
    print("=" * 60)
    print(f"RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Tema profissional funcionando corretamente.")
        print()
        print("PR√ìXIMOS PASSOS:")
        print("1. Execute a aplica√ß√£o: python main.py")
        print("2. Verifique se os Material Icons carregam corretamente")
        print("3. Teste a responsividade em diferentes tamanhos de tela")
        print("4. Valide a apar√™ncia corporativa em todas as p√°ginas")
        return True
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)