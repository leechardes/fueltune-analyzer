# =============================================
# FuelTune Streamlit - Helm Deployment Template
# =============================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fueltune.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "fueltune.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "fueltune.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "fueltune.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fueltune.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      
      {{- if .Values.initContainers }}
      initContainers:
        # Wait for database
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              {{- if .Values.postgresql.enabled }}
              until pg_isready -h {{ include "fueltune.fullname" . }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }}; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              {{- else }}
              echo "Using external database"
              {{- end }}
          env:
            {{- if .Values.postgresql.enabled }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "fueltune.fullname" . }}-postgresql
                  key: postgres-password
            {{- end }}
        {{- with .Values.initContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
            capabilities:
              drop:
                {{- range .Values.securityContext.capabilities.drop }}
                - {{ . }}
                {{- end }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          
          # Environment Variables
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            
            # Pod metadata
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            
            # Database connection
            {{- if .Values.secrets.database.enabled }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.database.name }}
                  key: {{ .Values.secrets.database.keys.url }}
            {{- end }}
            
            # Redis connection
            {{- if .Values.secrets.redis.enabled }}
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.redis.name }}
                  key: {{ .Values.secrets.redis.keys.url }}
            {{- end }}
          
          # ConfigMap environment variables
          {{- if .Values.configMap.enabled }}
          envFrom:
            - configMapRef:
                name: {{ .Values.configMap.name }}
          {{- end }}
          
          # Health checks
          {{- if .Values.healthChecks.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthChecks.liveness.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.liveness.failureThreshold }}
            successThreshold: 1
          {{- end }}
          
          {{- if .Values.healthChecks.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthChecks.readiness.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.readiness.failureThreshold }}
            successThreshold: 1
          {{- end }}
          
          {{- if .Values.healthChecks.startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.healthChecks.startup.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.startup.failureThreshold }}
            successThreshold: 1
          {{- end }}
          
          # Resources
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
          # Volume mounts
          volumeMounts:
            {{- if .Values.persistence.data.enabled }}
            - name: data-volume
              mountPath: /app/data
              readOnly: true
            {{- end }}
            {{- if .Values.persistence.logs.enabled }}
            - name: logs-volume
              mountPath: /app/logs
            {{- end }}
            - name: cache-volume
              mountPath: /app/cache
            {{- if .Values.configMap.enabled }}
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
        
        {{- with .Values.sidecars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      
      # Volumes
      volumes:
        {{- if .Values.persistence.data.enabled }}
        - name: data-volume
          persistentVolumeClaim:
            claimName: {{ include "fueltune.fullname" . }}-data-pvc
        {{- end }}
        {{- if .Values.persistence.logs.enabled }}
        - name: logs-volume
          persistentVolumeClaim:
            claimName: {{ include "fueltune.fullname" . }}-logs-pvc
        {{- else }}
        - name: logs-volume
          emptyDir:
            sizeLimit: "1Gi"
        {{- end }}
        - name: cache-volume
          emptyDir:
            sizeLimit: "500Mi"
        {{- if .Values.configMap.enabled }}
        - name: config-volume
          configMap:
            name: {{ .Values.configMap.name }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      
      # Node selection
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Affinity
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Tolerations
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # DNS and restart policy
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30