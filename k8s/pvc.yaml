# =============================================
# FuelTune Streamlit - Persistent Volume Claims
# =============================================
# Storage configuration for data persistence

# =============================================
# Application Data PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fueltune-data-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: data-storage
spec:
  accessModes:
    - ReadWriteMany  # Multiple pods can read/write
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Use SSD storage class
  
  # Volume attributes for performance
  volumeMode: Filesystem
  
  # Data source (if restoring from snapshot)
  # dataSource:
  #   name: fueltune-data-snapshot
  #   kind: VolumeSnapshot
  #   apiGroup: snapshot.storage.k8s.io

---
# =============================================
# PostgreSQL Data PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: postgres-storage
spec:
  accessModes:
    - ReadWriteOnce  # Single pod access for database
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
  volumeMode: Filesystem

---
# =============================================
# Redis Data PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: redis-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
  volumeMode: Filesystem

---
# =============================================
# Prometheus Data PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: prometheus-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard  # Can use standard storage for metrics
  volumeMode: Filesystem

---
# =============================================
# Grafana Data PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: grafana-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
  volumeMode: Filesystem

---
# =============================================
# Backup Storage PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fueltune-backup-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: backup-storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard  # Use cheaper storage for backups
  volumeMode: Filesystem

---
# =============================================
# Logs Storage PVC
# =============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fueltune-logs-pvc
  namespace: fueltune
  labels:
    app: fueltune
    component: logs-storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
  volumeMode: Filesystem

---
# =============================================
# Storage Classes (Custom)
# =============================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast-ssd
  labels:
    app: fueltune
    component: storage-class
provisioner: kubernetes.io/aws-ebs  # Change based on your cloud provider
parameters:
  type: gp3
  fsType: ext4
  encrypted: "true"
  iopsPerGB: "10"
  throughput: "125"
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Retain

---
# =============================================
# NFS Storage Class (if using NFS)
# =============================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storage
  labels:
    app: fueltune
    component: nfs-storage-class
provisioner: nfs.csi.k8s.io
parameters:
  server: nfs-server.example.com
  share: /exports/fueltune
mountOptions:
  - hard
  - intr
  - nfsvers=4.1
volumeBindingMode: Immediate
allowVolumeExpansion: true
reclaimPolicy: Retain

---
# =============================================
# Persistent Volumes (Static provisioning example)
# =============================================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fueltune-data-pv
  labels:
    app: fueltune
    component: data-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  
  # NFS example
  nfs:
    path: /exports/fueltune/data
    server: nfs-server.example.com
  
  # Or AWS EBS example
  # awsElasticBlockStore:
  #   volumeID: vol-0123456789abcdef0
  #   fsType: ext4
  
  # Or local path example
  # local:
  #   path: /mnt/data
  # nodeAffinity:
  #   required:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/hostname
  #         operator: In
  #         values:
  #         - worker-node-1

---
# =============================================
# Volume Snapshots (for backups)
# =============================================
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: fueltune-data-snapshot
  namespace: fueltune
  labels:
    app: fueltune
    component: data-snapshot
spec:
  source:
    persistentVolumeClaimName: fueltune-data-pvc
  volumeSnapshotClassName: csi-aws-vsc

---
# =============================================
# Volume Snapshot Class
# =============================================
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: csi-aws-vsc
  labels:
    app: fueltune
    component: snapshot-class
driver: ebs.csi.aws.com
deletionPolicy: Delete
parameters:
  encrypted: "true"

---
# =============================================
# Backup CronJob using Volume Snapshots
# =============================================
apiVersion: batch/v1
kind: CronJob
metadata:
  name: fueltune-backup-cronjob
  namespace: fueltune
  labels:
    app: fueltune
    component: backup-cronjob
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: fueltune
            component: backup-job
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: alpine:latest
            command:
            - sh
            - -c
            - |
              apk add --no-cache curl kubectl
              kubectl create volumesnapshot fueltune-data-snapshot-$(date +%Y%m%d-%H%M%S) \
                --from-pvc=fueltune-data-pvc \
                --volume-snapshot-class=csi-aws-vsc
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 200m
                memory: 256Mi