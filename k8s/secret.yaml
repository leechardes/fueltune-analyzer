# =============================================
# FuelTune Streamlit - Kubernetes Secrets Template
# =============================================
# IMPORTANT: This is a template file. Replace placeholders with actual values
# and apply proper base64 encoding for sensitive data.

apiVersion: v1
kind: Secret
metadata:
  name: fueltune-secrets
  namespace: fueltune
  labels:
    app: fueltune
    component: secrets
type: Opaque
data:
  # =============================================
  # Database Credentials
  # =============================================
  # Base64 encoded values - replace with actual credentials
  postgres-username: ZnVlbHR1bmU=  # fueltune
  postgres-password: <REPLACE_WITH_BASE64_ENCODED_PASSWORD>
  postgres-database: ZnVlbHR1bmVfcHJvZA==  # fueltune_prod
  database-url: <REPLACE_WITH_BASE64_ENCODED_DATABASE_URL>
  
  # =============================================
  # Redis Credentials
  # =============================================
  redis-password: <REPLACE_WITH_BASE64_ENCODED_REDIS_PASSWORD>
  redis-url: <REPLACE_WITH_BASE64_ENCODED_REDIS_URL>
  
  # =============================================
  # Application Secrets
  # =============================================
  app-secret-key: <REPLACE_WITH_BASE64_ENCODED_SECRET_KEY>
  jwt-secret: <REPLACE_WITH_BASE64_ENCODED_JWT_SECRET>
  encryption-key: <REPLACE_WITH_BASE64_ENCODED_ENCRYPTION_KEY>

---
# =============================================
# TLS Certificates Secret Template
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: fueltune-tls-secret
  namespace: fueltune
  labels:
    app: fueltune
    component: tls
type: kubernetes.io/tls
data:
  # Replace with actual base64 encoded certificate and key
  tls.crt: <REPLACE_WITH_BASE64_ENCODED_CERTIFICATE>
  tls.key: <REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY>

---
# =============================================
# Monitoring TLS Secret Template
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: fueltune-monitoring-tls-secret
  namespace: fueltune
  labels:
    app: fueltune
    component: monitoring-tls
type: kubernetes.io/tls
data:
  tls.crt: <REPLACE_WITH_BASE64_ENCODED_CERTIFICATE>
  tls.key: <REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY>

---
# =============================================
# API TLS Secret Template
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: fueltune-api-tls-secret
  namespace: fueltune
  labels:
    app: fueltune
    component: api-tls
type: kubernetes.io/tls
data:
  tls.crt: <REPLACE_WITH_BASE64_ENCODED_CERTIFICATE>
  tls.key: <REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY>

---
# =============================================
# Basic Auth Secret for Monitoring
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: fueltune
  labels:
    app: fueltune
    component: monitoring-auth
type: Opaque
data:
  # htpasswd generated auth string (base64 encoded)
  # Generate with: htpasswd -nb admin <password> | base64
  auth: <REPLACE_WITH_BASE64_ENCODED_HTPASSWD>

---
# =============================================
# Docker Registry Secret (if using private registry)
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: fueltune
  labels:
    app: fueltune
    component: docker-registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <REPLACE_WITH_BASE64_ENCODED_DOCKER_CONFIG>

---
# =============================================
# Service Account Token Secret
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: fueltune-service-account-token
  namespace: fueltune
  labels:
    app: fueltune
    component: service-account
  annotations:
    kubernetes.io/service-account.name: fueltune-service-account
type: kubernetes.io/service-account-token

---
# =============================================
# External API Keys and Tokens
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: fueltune-external-apis
  namespace: fueltune
  labels:
    app: fueltune
    component: external-apis
type: Opaque
data:
  # Add any external API keys or tokens here
  # Example: slack-webhook-url, email-smtp-password, etc.
  slack-webhook: <REPLACE_WITH_BASE64_ENCODED_SLACK_WEBHOOK_URL>
  smtp-password: <REPLACE_WITH_BASE64_ENCODED_SMTP_PASSWORD>

---
# =============================================
# Certificate Authority Bundle (if needed)
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: ca-bundle
  namespace: fueltune
  labels:
    app: fueltune
    component: ca-bundle
type: Opaque
data:
  ca-bundle.crt: <REPLACE_WITH_BASE64_ENCODED_CA_BUNDLE>

---
# =============================================
# SSH Keys Secret (for private repositories)
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: ssh-keys
  namespace: fueltune
  labels:
    app: fueltune
    component: ssh-keys
type: Opaque
data:
  ssh-privatekey: <REPLACE_WITH_BASE64_ENCODED_SSH_PRIVATE_KEY>
  ssh-publickey: <REPLACE_WITH_BASE64_ENCODED_SSH_PUBLIC_KEY>

# =============================================
# USAGE INSTRUCTIONS:
# =============================================
# 
# 1. Replace all placeholders with actual base64 encoded values
# 2. For passwords, use strong random strings:
#    openssl rand -base64 32
# 
# 3. For htpasswd (monitoring auth):
#    htpasswd -nb admin your_password | base64 -w 0
# 
# 4. For database URL:
#    echo -n "postgresql://user:pass@host:5432/db" | base64 -w 0
# 
# 5. For docker config:
#    kubectl create secret docker-registry docker-registry-secret \
#      --docker-server=your-registry \
#      --docker-username=your-username \
#      --docker-password=your-password \
#      --dry-run=client -o yaml | grep dockerconfigjson
# 
# 6. Apply secrets before other resources:
#    kubectl apply -f secret.yaml
# 
# SECURITY NOTES:
# - Never commit actual secrets to version control
# - Use sealed-secrets or external secret management
# - Rotate secrets regularly
# - Limit secret access with RBAC